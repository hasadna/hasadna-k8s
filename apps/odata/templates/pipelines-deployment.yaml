{{ if and .Values.enabled .Values.pipelines.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata: {name: pipelines}
spec:
  selector:
    matchLabels:
      app: pipelines
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 2
  template:
    metadata:
      labels: {app: pipelines}
    spec:
      {{ if .Values.globalTolerations }}tolerations: {{ .Values.globalTolerations }}{{ end }}
      serviceAccountName: {{ .Values.ckanServiceAccountName | quote }}
      {{ if .Values.pipelines.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.pipelines.terminationGracePeriodSeconds }}
      {{ end }}
      initContainers:
      - name: initialize
        image: orihoch/data4dappl-kubectl:v0.2.2
        command: [bash, "-c", "./kubectl.sh initialize-pipelines $PIPELINES_SYSTEMIN_USER $PIPELINES_SYSADMIN_EMAIL $PIPELINES_SECRET_NAME"]
        env:
        - name: PIPELINES_SYSTEMIN_USER
          value: {{ .Values.pipelines.sysadminUser | default "pipelines-sysadmin" | quote }}
        - name: PIPELINES_SYSADMIN_EMAIL
          value: {{ .Values.pipelines.sysadminEmail | default "pipelines-sysadmin@ckan" | quote }}
        - name: PIPELINES_SECRET_NAME
          value: {{ .Values.pipelines.secretName | default "pipelines" | quote }}
      containers:
      - name: pipelines
        image: orihoch/datapackage-pipelines-ckanext:v0.0.4
        {{ if not .Values.pipelines.manual }}
        args:
        - "server"
        {{ end }}
        env:
        - name: CKAN_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.pipelines.secretName | default "pipelines" | quote }}
              key: apikey
        - name: CKAN_URL
          value: {{ .Values.pipelines.ckanUrl | default "http://ckan:5000" | quote }}
        - name: DPP_REDIS_HOST
          value: "127.0.0.1"
        {{ if .Values.pipelines.manual }}
        - name: MANUAL_PIPELINES
          value: "yes"
        {{ else }}
        - name: DPP_CELERY_BROKER
          value: "redis://localhost:6379/6"
        {{ end }}
        ports:
        - {containerPort: 5050}
        resources: {{ .Values.pipelines.resources }}
        volumeMounts:
        - {mountPath: /pipelines, name: pipelines}
        - {mountPath: /var/lib/ckan, name: ckan}
        - {mountPath: /var/redis, name: pipelines-redis}
        livenessProbe:
          initialDelaySeconds: 3600
          timeoutSeconds: 30
          failureThreshold: 1
          exec:
            command:
            - sh
            - -c
            - |
              ! [ `redis-cli ping | grep -c PONG` = 1 ] && sleep 2 && ! [ `redis-cli ping | grep -c PONG` = 1 ] && sleep 2 && ! [ `redis-cli ping | grep -c PONG` = 1 ] && touch /var/lib/ckan/data/pipelines/upload_via_email/errors/stuck_pipelines_should_restart
              if [ -e /var/lib/ckan/data/pipelines/upload_via_email/errors/stuck_pipelines_should_restart ]; then
                echo stuck_pipelines_should_restart
                cat /var/lib/ckan/data/pipelines/upload_via_email/errors/stuck_pipelines_should_restart
                rm -rf /var/redis/* &&\
                rm /var/lib/ckan/data/pipelines/upload_via_email/errors/stuck_pipelines_should_restart &&\
                exit 1
              else
                exit 0
              fi
      - name: monitor
        image: python:3.8-alpine@sha256:2f5c766f8daec633ef7bb56076bfc352e97c19f76555ecf1f2b1f54db4367ef4
        env:
        - name: SLEEP_SECONDS
          value: "5"
        - name: SLACK_NOTIFICATIONS_URL
          {{ if .Values.pipelines.monitorSecretName }}
          valueFrom:
            secretKeyRef:
              name: {{ .Values.pipelines.monitorSecretName | quote }}
              key: SLACK_NOTIFICATIONS_URL
          {{ else }}
          value: ""
          {{ end }}
        command:
        - sh
        - -c
        - |
          chmod -R 777 /var/lib/ckan/data/pipelines/upload_via_email/errors
          apk add curl
          pip install requests==2.22.0
          while sleep $SLEEP_SECONDS; do
            rm -f .slack_payload
            python -c 'import json, sys, secrets, os, requests, datetime, traceback
          p = requests.get("http://localhost:5050/api/raw/ckanext-upload_via_email/upload_via_email").json()
          payload = {
            "channel": "#odata-notifications",
            "username": "odata-pipelines",
            "icon_emoji": ":ghost:"
          }
          p_message = p["message"]
          error_id = last_success = str(p["last_success"])
          try:
            last_success = datetime.datetime.fromtimestamp(float(last_success))
            if (datetime.datetime.now() - last_success).total_seconds()/60/60 > 3:
              current_stuck = error_id
              last_stuck = None
              if os.path.exists("/var/lib/ckan/data/pipelines/upload_via_email/errors/last_stuck_pipelines_should_restart"):
                with open("/var/lib/ckan/data/pipelines/upload_via_email/errors/last_stuck_pipelines_should_restart", "r") as f:
                  last_stuck = f.read()
              if current_stuck == last_stuck:
                print("pipelines are stuck.. they should be restarted soon: " + error_id)
              else:
                print("creating stuck_pipelines_should_restart file: " + error_id)
                with open("/var/lib/ckan/data/pipelines/upload_via_email/errors/stuck_pipelines_should_restart", "w") as f:
                  f.write(error_id)
                with open("/var/lib/ckan/data/pipelines/upload_via_email/errors/last_stuck_pipelines_should_restart", "w") as f:
                  f.write(error_id)
          except Exception:
            traceback.print_exc()
          if p_message == "Succeeded" or p.get("success"):
            success_file = f"/var/lib/ckan/data/pipelines/upload_via_email/errors/success_{error_id}.json"
            if os.path.exists(success_file):
              exit(0)
            payload_message = None
            last_created_datasets = p.get("stats", {}).get("last created datasets", [])
            if len(last_created_datasets) > 0:
              payload_message = f"upload via email: created datasets: {last_created_datasets} https://pipelines.odata.org.il/ckan/data/pipelines/upload_via_email/errors/success_{error_id}.json"
            elif "downloaded_messages" in str(p) or "unauthorized" in str(p) or "sent emails" in str(p):
              payload_message = f"upload via email: processed messages https://pipelines.odata.org.il/ckan/data/pipelines/upload_via_email/errors/success_{error_id}.json"
            if os.path.exists("/var/lib/ckan/data/pipelines/upload_via_email/errors/active_error"):
              os.unlink("/var/lib/ckan/data/pipelines/upload_via_email/errors/active_error")
              if not payload_message:
                payload_message = f"upload via email: {p_message} https://pipelines.odata.org.il/ckan/data/pipelines/upload_via_email/errors/success_{error_id}.json"
            if payload_message:
              with open(success_file, "w") as f:
                json.dump(p, f, indent=2)
              payload.update(text=payload_message)
              with open(".slack_payload", "w") as f:
                json.dump(payload, f)
            exit(0)
          elif p_message in ["Running", "Queued"]:
            exit(0)
          else:
            error_file = f"/var/lib/ckan/data/pipelines/upload_via_email/errors/error_{error_id}.json"
            with open("/var/lib/ckan/data/pipelines/upload_via_email/errors/active_error", "w") as f:
              f.write(error_file)
            if os.path.exists(error_file):
              exit(0)
            payload.update(text=f"Error in upload_via_email pipeline: https://pipelines.odata.org.il/ckan/data/pipelines/upload_via_email/errors/error_{error_id}.json")
            with open(error_file, "w") as f:
              json.dump(p, f, indent=2)
            with open(".slack_payload", "w") as f:
              json.dump(payload, f)
            exit(0)'
            chmod -R 777 /var/lib/ckan/data/pipelines/upload_via_email/errors
            [ "$?" != "0" ] && exit 1
            if [ -e .slack_payload ]; then
              rm -f /var/lib/ckan/data/pipelines/upload_via_email/errors/stuck_pipelines_should_restart
              echo sending slack notification
              echo "$(cat .slack_payload)"
              curl -X POST --data-urlencode "payload=$(cat .slack_payload)" $SLACK_NOTIFICATIONS_URL
              echo
              echo slack notification exit code: $?
            fi
          done
        volumeMounts:
        - {mountPath: /var/lib/ckan, name: ckan}
      volumes:
      - name: ckan
        persistentVolumeClaim:
          claimName: ckan
      - name: pipelines
        nfs:
          server: {{ .Values.ckanDataNfsServer | default "nfs" | quote }}
          path: /odata/pipelines
      - name: pipelines-redis
        nfs:
          server: {{ .Values.ckanDataNfsServer | default "nfs" | quote }}
          path: /odata/pipelines-redis
{{ end }}
