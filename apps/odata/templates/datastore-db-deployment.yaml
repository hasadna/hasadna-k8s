{{ if and .Values.enabled .Values.datastore.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datastore-db
spec:
  selector:
    matchLabels:
      app: datastore-db
  replicas: 1
  revisionHistoryLimit: 2
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: datastore-db
    spec:
      {{ if .Values.globalTolerations }}tolerations: {{ .Values.globalTolerations }}{{ end }}
      {{ if .Values.datastore.dbNodeSelector }}
      nodeSelector:
        {{ .Values.datastore.dbNodeSelector }}
      {{ end }}
      {{ if .Values.datastore.dbKubeIpDnsUpdaterSecret }}
      serviceAccountName: {{ .Values.datastore.dbKubeIpDnsUpdaterServiceAccountName | quote }}
      initContainers:
      - name: dns
        image: orihoch/kube-ip-dns-updater:v0.0.9
        envFrom:
        - secretRef:
            name: {{ .Values.datastore.dbKubeIpDnsUpdaterSecret | quote }}
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      {{ end }}
      terminationGracePeriodSeconds: {{ .Values.datastore.terminationGracePeriodSeconds }}
      containers:
      - name: db
        image: {{ .Values.datastore.image | quote }}
        ports:
        - containerPort: 5432
          {{ if .Values.datastore.dbEnableHostPort }}hostPort: 15432{{ end }}
        resources: {{ .Values.datastore.resources }}
        env:
        - name: POSTGRES_PASSWORD
          valueFrom: {secretKeyRef: {name: {{ .Values.envVarsSecretName | default "env-vars" | quote }}, key: "DATASTORE_POSTGRES_PASSWORD"}}
        - name: DATASTORE_RO_PASSWORD
          valueFrom: {secretKeyRef: {name: {{ .Values.envVarsSecretName | default "env-vars" | quote }}, key: "DATASTORE_RO_PASSWORD"}}
        - name: DATASTORE_RO_USER
          valueFrom: {secretKeyRef: {name: {{ .Values.envVarsSecretName | default "env-vars" | quote }}, key: "DATASTORE_RO_USER"}}
        {{ if .Values.datastore.publicreadonlyDbUserPasswordSecretName }}
        - name: DATASTORE_PUBLIC_RO_PASSWORD
          valueFrom: {secretKeyRef: {name: {{ .Values.datastore.publicreadonlyDbUserPasswordSecretName | quote }}, key: "DATASTORE_PUBLIC_RO_PASSWORD"}}
        {{ end }}
        {{ if .Values.datastore.dbOps.enabled }}
        - name: BACKUP_DATABASE_NAME
          value: datastore
        - name: BACKUP_DATABASE_FILE
          value: "/db-backup/datastore.dump"
        - name: BACKUP_CRONLINE
          #      minute hour day_of_month month day_of_week
          value: "0     3    *            *     *"
        {{ end }}
        {{ if .Values.datastore.initialize }}
        command: [bash, /db-scripts/initialize-datastore.sh]
        {{ else if .Values.datastore.dbOps.enabled }}
        {{ if .Values.datastore.dbOps.backup }}
        command:
        - bash
        - "-c"
        - |
          bash /db-scripts/backup-cron.sh &
          {{ if .Values.datastore.publicreadonlyDbUserPasswordSecretName }}
          bash /db-scripts/datastore-permissions-cron.sh &
          {{ end }}
          exec docker-entrypoint.sh postgres
        {{ else if .Values.datastore.dbOps.restore }}
        command: [bash, /db-scripts/restore-datastore.sh]
        {{ end }}
        {{ end }}
        volumeMounts:
        - name: db
          mountPath: /var/lib/postgresql/data
        {{ if .Values.datastore.dbOps.enabled }}
        - name: backups
          mountPath: /db-backup
        {{ end }}
      {{ if .Values.datastore.dbOps.enabled }}
      - name: db-ops
        image: {{ .Values.datastore.opsImage | quote }}
        {{ if .Values.datastore.dbOps.backup }}
        args: ["bash", "/db-scripts/upload-cron.sh"]
        {{ else if .Values.datastore.dbOps.restore }}
        args: ["bash", "/db-scripts/download.sh", {{ .Values.datastore.dbOps.restore | quote }}]
        {{ else }}
        args: ["bash", "-c", "while true; do sleep 86400; done"]
        {{ end }}
        resources: {"requests": {"cpu": "5m", "memory": "10Mi"}}
        env:
        - name: SECRET_SERVICE_KEY_FILE
          value: /secret_k8s_ops/secret.json
        - name: DB_BACKUP_FILE
          value: /db-backup/datastore.dump
        - name: BACKUP_TARGET_PREFIX
          value: {{ .Values.datastore.dbOps.backup | quote }}
        - name: BACKUP_TARGET_SUFFIX
          value: ".datastore.dump"
        volumeMounts:
        - name: backups
          mountPath: /db-backup
        - name: k8s-ops
          mountPath: /secret_k8s_ops
          readOnly: true
      {{ end }}
      volumes:
      - name: db
        persistentVolumeClaim:
          claimName: datastore-db
      {{ if .Values.datastore.dbOps.enabled }}
      - name: backups
        emptyDir: {}
      - name: k8s-ops
        secret:
          secretName: {{ .Values.dbOps.secretName | default "ckan-db-backups" | quote }}
      {{ end }}
{{ end }}
