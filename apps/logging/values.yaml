loki:
  global:
    extraEnv:
      - name: GRAFANA_LOKI_S3_ACCESKEYID
        valueFrom:
          secretKeyRef:
            name: loki-s3-credentials
            key: accesskeyid
      - name: GRAFANA_LOKI_S3_SECRETACCESSKEY
        valueFrom:
          secretKeyRef:
            name: loki-s3-credentials
            key: secretaccesskey
  deploymentMode: Distributed
  loki:
    auth_enabled: false
    storage:
      type: s3
      bucketNames:
        chunks: hasadna-rke2-logging-loki
        ruler: hasadna-rke2-logging-loki-ruler
        admin: hasadna-rke2-logging-loki-admin
      s3:
        region: eu-west-3
        accessKeyId: "${GRAFANA_LOKI_S3_ACCESKEYID}"
        secretAccessKey: "${GRAFANA_LOKI_S3_SECRETACCESSKEY}"
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    ingester:
      chunk_encoding: snappy
    querier:
      # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
      max_concurrent: 4
    pattern_ingester:
      enabled: true
    limits_config:
      allow_structured_metadata: true
      volume_enabled: true
  ingester:
    replicas: 3
    zoneAwareReplication:
       enabled: false
  querier:
    replicas: 3
    maxUnavailable: 2
  queryFrontend:
    replicas: 2
    maxUnavailable: 1
  queryScheduler:
    replicas: 2
  distributor:
    replicas: 3
    maxUnavailable: 2
  compactor:
    replicas: 1
  indexGateway:
    replicas: 2
    maxUnavailable: 1
  bloomPlanner:
    replicas: 0
  bloomBuilder:
    replicas: 0
  bloomGateway:
    replicas: 0
  backend:
     replicas: 0
  read:
     replicas: 0
  write:
     replicas: 0
  singleBinary:
     replicas: 0
  gateway:
    nginxConfig:
      resolver: rke2-coredns-rke2-coredns.kube-system.svc.cluster.local

alloy:
  alloy:
    clustering:
      enabled: true
    configMap:
      content: |
        loki.write "default" {
          endpoint {
            url = "http://logging-loki-gateway:3100/loki/api/v1/push"
          }
        }
        discovery.kubernetes "pod" {
          role = "pod"
        }
        discovery.relabel "pod" {
          targets = discovery.kubernetes.pod.targets
          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            target_label  = "namespace"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            target_label  = "pod_name"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            target_label  = "container_name"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_node_name"]
            target_label  = "node_name"
          }
          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name", "__meta_kubernetes_pod_uid"]
            target_label  = "__log_pods_subpath"
            separator     = "_"
          }
          rule {
            source_labels = ["__log_pods_subpath", "__meta_kubernetes_pod_container_name"]
            target_label  = "__path__"
            separator     = "/"
            replacement   = "/var/log/pods/$1/*.log"
          }
        }
        local.file_match "pod" {
          path_targets = discovery.relabel.pod.output
        }
        loki.source.file "pod" {
          targets    = local.file_match.pod.targets
          forward_to = [loki.write.default.receiver]
        }

secrets:
  - name: loki-s3-credentials
    data:
      accesskeyid: "~vault:Projects/iac/loki:aws_access_key_id~"
      secretaccesskey: "~vault:Projects/iac/loki:aws_secret_access_key~"
